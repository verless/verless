package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"text/template"
)

// Constants related to generating the Go code containing
// the example file map.
const (
	exampleDir  string = "example"
	fileMapFile string = "core/create/files.go"
	fileMapTpl  string = `// Generated by cmd/generate.go. Do not edit manually,
// run go generate in the project root instead.

package create

var (
	files = map[string]string{
	{{range $key, $value := .}}
		"{{$key}}": ` + "`{{$value}}`" + `,
	{{end}}
	}
)`
)

// main runs all code generations.
func main() {
	if err := generateExampleFileMap(); err != nil {
		log.Fatal(err)
	}
}

// generateExampleFileMap generates a map filled with files
// from the verless example project and renders that map into
// a new file (fileMapFile).
//
// As a result, the contents of all example project files are
// available as strings in the generated map. This is required
// for creating the initial project files with `project create`.
func generateExampleFileMap() error {
	var (
		files = make(map[string]string)
	)

	if err := filepath.Walk(exampleDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() || filepath.Ext(path) == ".jpg" {
			return nil
		}

		buf, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}

		files[filepath.ToSlash(path)] = string(buf)
		return nil

	}); err != nil {
		return err
	}

	f, err := os.Create(fileMapFile)
	if err != nil {
		return err
	}

	tpl, err := template.New("").Parse(fileMapTpl)
	if err != nil {
		return err
	}

	return tpl.Execute(f, files)
}
